const mongoose = require('mongoose');
const Customer = require('./src/models/Customer');

async function createUniqueIndex() {
  try {
    // ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    await mongoose.connect('mongodb://localhost:27017/animal_vaccination_db');
    console.log('‚úÖ Connected to MongoDB\n');

    // ÿπÿ±ÿ∂ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÄ indexes ÿßŸÑÿ≠ÿßŸÑŸäÿ© ÿ£ŸàŸÑÿßŸã
    console.log('üìã Current indexes before update:');
    const oldIndexes = await Customer.collection.indexes();
    oldIndexes.forEach(index => {
      console.log(`  - ${index.name}:`, index.key, index.unique ? '(unique)' : '(not unique)');
    });
    console.log('');

    // ÿ≠ÿ∞ŸÅ ÿßŸÑŸÄ index ÿßŸÑŸÇÿØŸäŸÖ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖŸàÿ¨ŸàÿØÿßŸã
    try {
      await Customer.collection.dropIndex('phone_1');
      console.log('üóëÔ∏è  Dropped old phone index');
    } catch (error) {
      console.log('‚ÑπÔ∏è  No existing phone index to drop:', error.message);
    }

    // ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ± ŸÇŸÑŸäŸÑÿßŸã
    await new Promise(resolve => setTimeout(resolve, 1000));

    // ÿ•ŸÜÿ¥ÿßÿ° unique index ÿ¨ÿØŸäÿØ
    try {
      await Customer.collection.createIndex({ phone: 1 }, { unique: true, name: 'phone_unique_idx' });
      console.log('‚úÖ Created unique index on phone field\n');
    } catch (error) {
      console.log('‚ö†Ô∏è  Error creating index:', error.message);
      // ŸÖÿ≠ÿßŸàŸÑÿ© ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ syncIndexes
      await Customer.syncIndexes();
      console.log('‚úÖ Synced indexes from schema\n');
    }

    // ÿπÿ±ÿ∂ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÄ indexes ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ©
    const indexes = await Customer.collection.indexes();
    console.log('üìã Final indexes:');
    indexes.forEach(index => {
      console.log(`  - ${index.name}:`, index.key, index.unique ? '(unique ‚úì)' : '(not unique)');
    });

    // ÿßÿÆÿ™ÿ®ÿßÿ±: ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿ£ÿ±ŸÇÿßŸÖ ŸÖŸÉÿ±ÿ±ÿ©
    console.log('\nüîç Checking for duplicate phone numbers...');
    const duplicates = await Customer.aggregate([
      {
        $group: {
          _id: '$phone',
          count: { $sum: 1 },
          ids: { $push: '$_id' }
        }
      },
      {
        $match: {
          count: { $gt: 1 }
        }
      }
    ]);

    if (duplicates.length > 0) {
      console.log('‚ö†Ô∏è  Found duplicate phone numbers:');
      duplicates.forEach(dup => {
        console.log(`  Phone: ${dup._id}, Count: ${dup.count}, IDs: ${dup.ids.join(', ')}`);
      });
      console.log('\nüí° You may want to manually remove or update these duplicates.');
    } else {
      console.log('‚úÖ No duplicate phone numbers found!');
    }

    await mongoose.connection.close();
    console.log('\n‚úÖ Done!');
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    if (error.code === 11000) {
      console.log('\n‚ö†Ô∏è  Duplicate key error detected!');
      console.log('There are existing duplicate phone numbers in the database.');
      console.log('Please remove duplicates before creating unique index.');
    }
    process.exit(1);
  }
}

createUniqueIndex();
